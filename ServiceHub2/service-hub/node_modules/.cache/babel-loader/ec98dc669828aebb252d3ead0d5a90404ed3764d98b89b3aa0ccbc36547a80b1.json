{"ast":null,"code":"var _jsxFileName = \"E:\\\\UADE\\\\2023\\\\2C\\\\2-Seminario de Integracion Profecional\\\\Elixir\\\\Elisir\\\\ServiceHub2\\\\service-hub\\\\src\\\\pages\\\\RestorePassword\\\\index.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Button, Typography, Container } from '@mui/material';\nimport { useLocation } from 'react-router-dom';\nimport { makeStyles } from '@mui/styles';\nimport mockDataBaseUserCredentials from '../../data/mockDataBaseUserCredentials';\nimport NotificationRed from '../../components/ui/NotificationRed';\nimport NotificationGreen from '../../components/ui/NotificationGreen';\nimport ControlledPasswordField from '../../components/form/ControlledPasswordField';\nimport SimplePasswordField from '../../components/form/SimplePasswordField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useQuery() {\n  _s();\n  return new URLSearchParams(useLocation().search);\n}\n_s(useQuery, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    height: '100vh'\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  textField: {\n    margin: theme.spacing(1),\n    width: '100%'\n  },\n  title: {\n    margin: theme.spacing(1)\n  }\n}));\nfunction RestorePassword() {\n  _s2();\n  const classes = useStyles();\n  const query = useQuery();\n  const email = query.get('email');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [notificationRedOpen, setNotificationRedOpen] = useState(false);\n  const [notificationRedMessage, setNotificationRedMessage] = useState('');\n  const [notificationGreenOpen, setNotificationGreenOpen] = useState(false);\n  const [notificationGreenMessage, setNotificationGreenMessage] = useState('');\n  const handleSubmit = event => {\n    event.preventDefault();\n    const userCredentials = mockDataBaseUserCredentials.find(user => user.email === email);\n    if (!userCredentials) {\n      setNotificationRedMessage('TODO: Validacion backend de usuario');\n      setNotificationRedOpen(true);\n      return;\n    }\n    if (password !== confirmPassword) {\n      setNotificationRedMessage('Las contraseñas ingresadas no coinciden.');\n      setNotificationRedOpen(true);\n      return;\n    }\n\n    // Aquí puedes agregar la lógica para restablecer la contraseña en la base de datos.\n    setNotificationGreenMessage('Contraseña modificada con exito!');\n    setNotificationGreenOpen(true);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.title,\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Restablecer Contrase\\xF1a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(ControlledPasswordField, {\n        className: classes.textField,\n        label: \"Nueva Contrase\\xF1a\",\n        value: password,\n        onChange: event => setPassword(event.target.value),\n        sx: {\n          mb: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SimplePasswordField, {\n        className: classes.textField,\n        label: \"Confirmar Contrase\\xF1a\",\n        value: confirmPassword,\n        onChange: event => setConfirmPassword(event.target.value),\n        sx: {\n          mb: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.button,\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        children: \"Confirmar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationRed, {\n      open: notificationRedOpen,\n      message: notificationRedMessage,\n      onClose: () => setNotificationRedOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationGreen, {\n      open: notificationGreenOpen,\n      message: notificationGreenMessage,\n      onClose: () => setNotificationGreenOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s2(RestorePassword, \"Nff6uKDPnVwLzK9jJX1hvUlpyQA=\", false, function () {\n  return [useStyles, useQuery];\n});\n_c = RestorePassword;\nexport default RestorePassword;\nvar _c;\n$RefreshReg$(_c, \"RestorePassword\");","map":{"version":3,"names":["React","useState","Button","Typography","Container","useLocation","makeStyles","mockDataBaseUserCredentials","NotificationRed","NotificationGreen","ControlledPasswordField","SimplePasswordField","jsxDEV","_jsxDEV","useQuery","_s","URLSearchParams","search","useStyles","theme","root","display","flexDirection","alignItems","height","button","margin","spacing","textField","width","title","RestorePassword","_s2","classes","query","email","get","password","setPassword","confirmPassword","setConfirmPassword","notificationRedOpen","setNotificationRedOpen","notificationRedMessage","setNotificationRedMessage","notificationGreenOpen","setNotificationGreenOpen","notificationGreenMessage","setNotificationGreenMessage","handleSubmit","event","preventDefault","userCredentials","find","user","className","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","label","value","onChange","target","sx","mb","color","type","open","message","onClose","_c","$RefreshReg$"],"sources":["E:/UADE/2023/2C/2-Seminario de Integracion Profecional/Elixir/Elisir/ServiceHub2/service-hub/src/pages/RestorePassword/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Button, Typography, Container } from '@mui/material';\nimport { useLocation } from 'react-router-dom';\nimport { makeStyles } from '@mui/styles';\nimport mockDataBaseUserCredentials from '../../data/mockDataBaseUserCredentials';\nimport NotificationRed from '../../components/ui/NotificationRed';\nimport NotificationGreen from '../../components/ui/NotificationGreen';\nimport ControlledPasswordField from '../../components/form/ControlledPasswordField';\nimport SimplePasswordField from '../../components/form/SimplePasswordField';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    height: '100vh',\n  },\n  button: {\n    margin: theme.spacing(1),\n  },\n  textField: {\n    margin: theme.spacing(1),\n    width: '100%',\n  },\n  title: {\n    margin: theme.spacing(1),\n  },\n}));\n\nfunction RestorePassword() {\n  const classes = useStyles();\n  const query = useQuery();\n  const email = query.get('email');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const [notificationRedOpen, setNotificationRedOpen] = useState(false);\n  const [notificationRedMessage, setNotificationRedMessage] = useState('');\n  const [notificationGreenOpen, setNotificationGreenOpen] = useState(false);\n  const [notificationGreenMessage, setNotificationGreenMessage] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const userCredentials = mockDataBaseUserCredentials.find(\n      (user) => user.email === email\n    );\n\n    if (!userCredentials) {\n      setNotificationRedMessage('TODO: Validacion backend de usuario');\n      setNotificationRedOpen(true);\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      setNotificationRedMessage('Las contraseñas ingresadas no coinciden.');\n      setNotificationRedOpen(true);\n      return;\n    }\n\n    // Aquí puedes agregar la lógica para restablecer la contraseña en la base de datos.\n    setNotificationGreenMessage('Contraseña modificada con exito!');\n    setNotificationGreenOpen(true);\n  };\n\n  return (\n    <Container className={classes.root}>\n      <Typography className={classes.title} variant=\"h4\" gutterBottom>\n        Restablecer Contraseña\n      </Typography>\n      <form onSubmit={handleSubmit}>\n        <ControlledPasswordField\n          className={classes.textField}\n          label=\"Nueva Contraseña\"\n          value={password}\n          onChange={(event) => setPassword(event.target.value)}\n          sx={{ mb: 2 }}\n        />\n        <SimplePasswordField\n          className={classes.textField}\n          label=\"Confirmar Contraseña\"\n          value={confirmPassword}\n          onChange={(event) => setConfirmPassword(event.target.value)}\n          sx={{ mb: 2 }}\n        />\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Confirmar\n        </Button>\n      </form>\n      <NotificationRed\n        open={notificationRedOpen}\n        message={notificationRedMessage}\n        onClose={() => setNotificationRedOpen(false)}\n      />\n      <NotificationGreen\n        open={notificationGreenOpen}\n        message={notificationGreenMessage}\n        onClose={() => setNotificationGreenOpen(false)}\n      />\n    </Container>\n  );\n}\n\nexport default RestorePassword;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}